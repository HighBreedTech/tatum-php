/**
 *
 * @export
 * @interface BtcTx
 */
class BtcTx extends Model {
    /**
     * Transaction hash.
* @var string
     * @memberof BtcTx
     */
    hash: string;
    /**
     * Witness hash in case of a SegWit transaction.
* @var string
     * @memberof BtcTx
     */
    witnessHash: string;
    /**
     * Fee paid for this transaction, in satoshis.
* @var number
     * @memberof BtcTx
     */
    fee: number;
    /**
     *
* @var number
     * @memberof BtcTx
     */
    rate: number;
    /**
     *
* @var number
     * @memberof BtcTx
     */
    mtime: number;
    /**
     * Height of the block this transaction belongs to.
* @var number
     * @memberof BtcTx
     */
    height: number;
    /**
     * Hash of the block this transaction belongs to.
* @var string
     * @memberof BtcTx
     */
    block: string;
    /**
     * Time of the transaction.
* @var number
     * @memberof BtcTx
     */
    time: number;
    /**
     * Index of the transaction in the block.
* @var number
     * @memberof BtcTx
     */
    index: number;
    /**
     * Index of the transaction.
* @var number
     * @memberof BtcTx
     */
    version: number;
    /**
     *
* @var Array
<BtcTxInputs>
     * @memberof BtcTx
     */
    inputs: BtcTxInputs[];
    /**
     *
    * @var Array
    <BtcTxOutputs>
     * @memberof BtcTx
     */
    outputs: BtcTxOutputs[];
    /**
     * Block this transaction was included in.
        * @var number
     * @memberof BtcTx
     */
    locktime: number;
}

/**
 *
 * @export
 * @interface BtcTxCoin
 */
class BtcTxCoin extends Model {
    /**
     *
        * @var number
     * @memberof BtcTxCoin
     */
    version: number;
    /**
     *
        * @var number
     * @memberof BtcTxCoin
     */
    height: number;
    /**
     *
        * @var number
     * @memberof BtcTxCoin
     */
    value: number;
    /**
     *
        * @var string
     * @memberof BtcTxCoin
     */
    script: string;
    /**
     * Sender address.
        * @var string
     * @memberof BtcTxCoin
     */
    address: string;
    /**
     * Coinbase transaction - miner fee.
        * @var boolean
     * @memberof BtcTxCoin
     */
    coinbase: boolean;
}

/**
 *
 * @export
 * @interface BtcTxInputs
 */
class BtcTxInputs extends Model {
    /**
     *
        * @var BtcTxPrevout
     * @memberof BtcTxInputs
     */
    prevout: BtcTxPrevout;
    /**
     * Data generated by a spender which is almost always used as variables to satisfy a pubkey script.
        * @var string
     * @memberof BtcTxInputs
     */
    script: string;
    /**
     * Transaction witness.
        * @var string
     * @memberof BtcTxInputs
     */
    witness: string;
    /**
     *
        * @var number
     * @memberof BtcTxInputs
     */
    sequence: number;
    /**
     *
        * @var BtcTxCoin
     * @memberof BtcTxInputs
     */
    coin: BtcTxCoin;
}

/**
 *
 * @export
 * @interface BtcTxOutputs
 */
class BtcTxOutputs extends Model {
    /**
     * Sent amount in satoshis.
        * @var number
     * @memberof BtcTxOutputs
     */
    value: number;
    /**
     * Transaction script.
        * @var string
     * @memberof BtcTxOutputs
     */
    script: string;
    /**
     * Recipient address.
        * @var string
     * @memberof BtcTxOutputs
     */
    address: string;
}

/**
 *
 * @export
 * @interface BtcTxPrevout
 */
class BtcTxPrevout extends Model {
    /**
     * Transaction hash of the input.
        * @var string
     * @memberof BtcTxPrevout
     */
    hash: string;
    /**
     * Transaction index of the input.
        * @var number
     * @memberof BtcTxPrevout
     */
    index: number;
}